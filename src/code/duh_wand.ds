//DS---------------------------------------------------------------------------
//
// Copyright(C) 2012 David Hill
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------------------------
//
// Elven Wand functions.
//
//-----------------------------------------------------------------------------

[
#include "duh_defs.dh"


//----------------------------------------------------------------------------|
// Global Variables                                                           |
//

constexpr int signoffset = 32768;


//----------------------------------------------------------------------------|
// Global Functions                                                           |
//

//
// DUH_ElvenLaserTrailSpawn
//
script DUH_ElvenLaserTrailSpawn(bool final)
{
   constexpr int density = 32;

   __variable __autoreg fixed curx = GetActorX(0);
   __variable __autoreg fixed cury = GetActorY(0);
   __variable __autoreg fixed curz = GetActorZ(0);

   __variable __autoreg fixed oldx =
      CheckInventory("DUH_MemberOldX") - signoffset;
   __variable __autoreg fixed oldy =
      CheckInventory("DUH_MemberOldY") - signoffset;
   __variable __autoreg fixed oldz =
      CheckInventory("DUH_MemberOldZ") - signoffset;

   __variable __autoreg fixed difx = curx - oldx;
   __variable __autoreg fixed dify = cury - oldy;
   __variable __autoreg fixed difz = curz - oldz;

   __variable __autoreg int i =
      (DUH_AbsFixed(difx) + DUH_AbsFixed(dify) + DUH_AbsFixed(difz)) / density;

   if (i)
   {
      difx = difx / i;
      dify = dify / i;
      difz = difz / i;
   };

   while (i--)
   {
      Spawn("DUH_ElvenLaserTrail", oldx += difx, oldy += dify, oldz += difz, 0,
            GetActorAngle(0)*256);
   };

   if (final)
   {
      if (GetActorZ(0) + 4 >= GetActorCeilingZ(0) &&
          CheckActorCeilingTexture(0, "F_SKY1"))
      {
         SetActorState(0, "DeathSky", false);
      }
      else if (GetActorZ(0) < GetActorFloorZ(0) &&
               CheckActorFloorTexture(0, "F_SKY1"))
      {
         SetActorState(0, "DeathSky", false);
      };
   }
   else
   {
      TakeInventory("DUH_MemberOldX", 65535);
      TakeInventory("DUH_MemberOldY", 65535);
      TakeInventory("DUH_MemberOldZ", 65535);

      GiveInventory("DUH_MemberOldX", (int)curx + signoffset);
      GiveInventory("DUH_MemberOldY", (int)cury + signoffset);
      GiveInventory("DUH_MemberOldZ", (int)curz + signoffset);
   };
};

//
// DUH_ElvenWandDamage
//
script DUH_ElvenWandDamage(bool useammo) -> int
{
   __variable __autoreg int ammo_count = CheckInventory(DUHelvenWandAmmo);
   __variable __autoreg int ammo_usage = (ammo_count / 50) + 1;
   __variable __autoreg int damage = (ammo_count / 25) + ammo_usage + 1;

   if (useammo)
      TakeInventory(DUHelvenWandAmmo, ammo_usage);

   return damage;
};

//
// DUH_ElvenWandFire
//
script DUH_ElvenWandFire(bool piercing)
{
   __variable __autoreg str missile =
      piercing ? "DUH_ElvenLaserRipper" : "DUH_ElvenLaser";

   __variable __autoreg int tid;

   tid = DUH_FireMissile(ActivatorTID(), missile, 1, GetActorAngle(0),
                         GetActorPitch(0), 256);

   GiveActorInventory(tid, "DUH_MemberOldX", (int)GetActorX(tid) + signoffset);
   GiveActorInventory(tid, "DUH_MemberOldY", (int)GetActorY(tid) + signoffset);
   GiveActorInventory(tid, "DUH_MemberOldZ", (int)GetActorZ(tid) + signoffset);
};

//
// DUH_ElvenWandReady
//
script DUH_ElvenWandReady(int frames)
{
   __variable static __array int[MAX_PLAYERS] tics;

   DUH_WeaponReady(frames, tics, DUHelvenWandAmmo, 2);
};

]
// EOF

