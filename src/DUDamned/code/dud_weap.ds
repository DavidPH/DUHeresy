//DS---------------------------------------------------------------------------
//
// Copyright(C) 2012 David Hill
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------------------------
//
// Weapon functions.
//
//-----------------------------------------------------------------------------

#include "dud_abil.dh"


//----------------------------------------------------------------------------|
// Global Functions                                                           |
//

//
// DUD_ChaingunDamage
//
__extscript "ACS" int DUD_ChaingunDamage()
{
   return 5 * DUD_GetDamageFactor(PlayerNumber(), AMMO_CLIP);
};

//
// DUD_FireBFG
//
__extscript "ACS" void DUD_FireBFG()
{
   int damage = 100 * DUD_GetDamageFactor(PlayerNumber(), AMMO_CELL);
   int pspeed =  25 * DUD_GetPSpeedFactor(PlayerNumber(), AMMO_CELL);

   DU_FireMissile(0, "DUD_BFGBall", damage, GetActorAngle(0), GetActorPitch(0), pspeed);

   TakeInventory("Cell", 40);
};

//
// DUD_FireDGun
//
__extscript "ACS" void DUD_FireDGun()
{
   static int[MAX_PLAYERS] counts;

   int *count = &counts[PlayerNumber()];

   int damage =  1 * DUD_GetDamageFactor(PlayerNumber(), AMMO_CLIP);
   int pspeed = 80 * DUD_GetPSpeedFactor(PlayerNumber(), AMMO_CLIP);

   fixed angle = GetActorAngle(0) + RandomFixed(-1.0/256, 1.0/256);
   fixed pitch = GetActorPitch(0) + RandomFixed(-1.0/256, 1.0/256);

   int tid;

   tid = DU_FireMissile(0, "DUD_Dakka", damage, angle, pitch, pspeed);

   switch((*count)++)
   {
   default:
   case 0: case 1: SetActorState(tid, "SpawnD"); break;
   case 2: case 3: SetActorState(tid, "SpawnA"); break;
   case 4: case 5: SetActorState(tid, "SpawnK"); break;
   case 6: case 7: SetActorState(tid, "SpawnK"); break;
   case 8: case 9: SetActorState(tid, "SpawnA"); break;
   };

   if(*count == 10) *count = 0;

   if(*count & 1)
      TakeInventory("Clip", 1);
};

//
// DUD_FirePlasma
//
__extscript "ACS" void DUD_FirePlasma()
{
   int damage =  5 * DUD_GetDamageFactor(PlayerNumber(), AMMO_CELL);
   int pspeed = 25 * DUD_GetPSpeedFactor(PlayerNumber(), AMMO_CELL);

   DU_FireMissile(0, "DUD_PlasmaBall", damage, GetActorAngle(0), GetActorPitch(0), pspeed);

   TakeInventory("Cell", 1);
};

//
// DUD_FistDamage
//
__extscript "ACS" int DUD_FistDamage()
{
   int base = CheckInventory("DUD_Berserk") * 5 + 2;

   return Random(base, base * 10);
};

//
// DUD_PistolDamage
//
__extscript "ACS" int DUD_PistolDamage()
{
   return 10 * DUD_GetDamageFactor(PlayerNumber(), AMMO_CLIP);
};

//
// DUD_RocketLuancherFire
//
__extscript "ACS" void DUD_RocketLauncherFire()
{
   int damage =  20 * DUD_GetDamageFactor(PlayerNumber(), AMMO_RCKT);
   int radius = 128 * DUD_GetRadiusFactor(PlayerNumber(), AMMO_RCKT);
   int pspeed =  20 * DUD_GetPSpeedFactor(PlayerNumber(), AMMO_RCKT);

   int tid = DU_FireMissile(0, "DUD_Rocket", damage, GetActorAngle(0),
                            GetActorPitch(0), pspeed);

   SetThingSpecial(tid, 0, radius, 0, 0, 0, 0);

   TakeInventory("RocketAmmo", 1);
};

//
// DUD_ShotgunPellets
//
__extscript "ACS" int DUD_ShotgunPellets(int base)
{
   return base * DUD_GetDamageFactor(PlayerNumber(), AMMO_SHEL);
};

// EOF

