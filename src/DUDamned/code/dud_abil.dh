//-----------------------------------------------------------------------------
//
// Copyright(C) 2012 David Hill
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------------------------
//
// Ability functions.
//
//-----------------------------------------------------------------------------

#ifndef DUD_ABIL_DH__
#define DUD_ABIL_DH__

#include "du_defs.dh"


//----------------------------------------------------------------------------|
// Types                                                                      |
//

enum dud_ability_e
{
   ABIL1_AMMO = 0,
   ABIL1_DAMAGE_CLIP,
   ABIL1_DAMAGE_SHEL,
   ABIL1_DAMAGE_RCKT,
   ABIL1_DAMAGE_CELL,
   ABIL1_BERSERK,

   ABIL2_AMMO = 0,
   ABIL2_ARMOR,
   ABIL2_RADIUS,
   ABIL2_PSPEED,

   ABIL3_AMMO = 0,
   ABIL3_HEALTH,
   ABIL3_DAMAGE,
   ABIL3_SPEED,
   ABIL3_JUMP,

   ABILMAX = 7
};

enum dud_ammo_e
{
   AMMO_CLIP,
   AMMO_SHEL,
   AMMO_RCKT,
   AMMO_CELL,

   AMMOMAX
};

enum dud_weapon_e
{
   WEAP1_FIST = 0,
   WEAP1_CSAW,

   WEAP2_PIST = 0,

   WEAP3_SHTG = 0,
   WEAP3_SHT2,

   WEAP4_CGUN = 0,

   WEAP5_RCKT = 0,

   WEAP6_PLAS = 0,

   WEAP7_BFG9 = 0,

   WEAPMAX = 3
};

//
// dud_ability_t
//
struct dud_ability_t
{
   bool           used;
   fixed [AMMOMAX]ammoCap;
   int   [AMMOMAX]ammoRegen;
   fixed [AMMOMAX]damage;
   fixed [AMMOMAX]radius;
   fixed [AMMOMAX]pspeed;
   int            armorRegen, healthRegen;
   fixed          speed, jumpz;
   str            desc;
   str            icon;
   str            iconDim;
   str            name;
   str            nameIco;
};

//
// dud_ammo_t
//
struct dud_ammo_t
{
   dud_ammo_e ammo;
   int        cap;
   int        regen;
   str        name;
   str        nameDec;
};

//
// dud_weapon_t
//
struct dud_weapon_t
{
   bool       used;
   dud_ammo_e ammo;
   str        desc;
   str        icon;
   str        iconDim;
   str        name;
   str        nameDec;
   str        nameIco;
};


//----------------------------------------------------------------------------|
// Global Variables                                                           |
//

extern __variable static dud_ammo_t [AMMOMAX]DUDammo;

extern __variable static dud_ability_t [3][ABILMAX]DUDability;
extern __variable static dud_ability_t *[MAX_PLAYERS][3]DUDabilitySelected;

extern __variable static dud_weapon_t [7][WEAPMAX]DUDweapon;
extern __variable static dud_weapon_t *[MAX_PLAYERS][7]DUDweaponSelected;


//----------------------------------------------------------------------------|
// Global Functions                                                           |
//

extern function DUD_AddWeapon(int slot, dud_weapon_e weap);

extern function fixed DUD_GetDamageFactor(int pnum, dud_ammo_e ammo);
extern function fixed DUD_GetPSpeedFactor(int pnum, dud_ammo_e ammo);
extern function fixed DUD_GetRadiusFactor(int pnum, dud_ammo_e ammo);

#endif//DUD_ABIL_DH__

