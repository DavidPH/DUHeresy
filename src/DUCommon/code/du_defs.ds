//-----------------------------------------------------------------------------
//
// Copyright(C) 2012 David Hill
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, see <http://www.gnu.org/licenses/>.
//
//-----------------------------------------------------------------------------
//
// Common defintions and general functions.
//
//-----------------------------------------------------------------------------

#include "du_defs.dh"


//----------------------------------------------------------------------------|
// Global Variables                                                           |
//

constexpr int DUsignOffset = 0x40000000;


//----------------------------------------------------------------------------|
// Global Functions                                                           |
//

//
// DU_AbsFixed
//
function DU_AbsFixed(fixed f) -> fixed
{
   return f < 0 ? -f : f;
};

function DU_AmmoReady(int tic, str ammo, int mul)
{
   int ammo_count = CheckInventory(ammo);
   int ammo_limit = GetAmmoCapacity(ammo) * mul;
   int period;

   period = ammo_count ? ammo_limit / ammo_count : ammo_limit;
   if (!(tic % period)) GiveInventory(ammo, 1);
};

//
// DU_FireMissile
//
function int DU_FireMissile(int shooter, str name, int damage, fixed angle,
   fixed pitch, fixed speed)
{
   int tid = DU_MakeTID();

   fixed velx = Cos(angle) * Cos(pitch) * speed;
   fixed vely = Sin(angle) * Cos(pitch) * speed;
   fixed velz = Sin(1.0 - pitch) * speed;

   fixed x = GetActorX(0);
   fixed y = GetActorY(0);
   fixed z = GetActorZ(0);

   if (GetActorViewHeight(ActivatorTID()))
   {
      z += GetActorViewHeight(ActivatorTID()) - 5;
   };

   // Hack to not kill projectile if shooting from water.
   // Cache original position because the position change could fail in which
   // case saying z-16 would lower the mobj!
   fixed shooterx = GetActorX(shooter);
   fixed shootery = GetActorY(shooter);
   fixed shooterz = GetActorZ(shooter);

   SetActorPosition(shooter, shooterx, shootery, shooterz+16, false);

   // SpawnProjectile is used to set the newly created missile's target.
   // Other than that, it's pretty useless because it always spawns at the
   // shooter's feet, so we just set all the positioning and velocity manually.
   SpawnProjectile(shooter, name, 0, 0, 0, 0, tid);

   SetActorPosition(shooter, shooterx, shootery, shooterz, false);

   // And here's the entire point of this function, custom damage.
   SetActorProperty(tid, APROP_Damage, damage);

   // Set twice for hacky avoidance of the floor.
   SetActorPosition(tid, x, y, z+16, false);
   SetActorPosition(tid, x, y, z, false);
   SetActorVelocity(tid, velx, vely, velz);

   SetActorAngle(tid, angle);
   SetActorPitch(tid, pitch);

   return tid;
};

//
// DU_GetInventoryFixed
//
function DU_GetInventoryFixed(int tid, str inv) -> fixed
{
   union {int i; fixed x;} u;

   if (tid)
   {
      u.i = CheckActorInventory(tid, inv);
   }
   else
   {
      u.i = CheckInventory(inv);
   };

   u.i -= DUsignOffset;
   u.i <<= 1;

   return u.x;
};

//
// DU_MakeTID
//
function DU_MakeTID() -> int
{
   static int tid;

   do
   {
      if(++tid <= 0) tid = 1;
   }
   while(ClassifyActor(0, tid));

   return tid;
};

//
// DU_SetInventoryFixed
//
function DU_SetInventoryFixed(int tid, str inv, fixed val)
{
   union {int i; fixed x;} u;

   u.x = val;

   u.i >>= 1;
   u.i += DUsignOffset;

   if (tid)
   {
      TakeActorInventory(tid, inv, 0x7FFFFFFF);
      GiveActorInventory(tid, inv, u.i);
   }
   else
   {
      TakeInventory(inv, 0x7FFFFFFF);
      GiveInventory(inv, u.i);
   };
};

//
// DU_WeaponReady
//
script DU_WeaponReady(int frames, int *tics, str ammo, int multiplier)
{
   DU_ArtifactReady(frames);

   while (frames--)
   {
      DU_AmmoReady(++tics[PlayerNumber()], ammo, multiplier);

      if (frames) Delay(1);
   };
};

// EOF

